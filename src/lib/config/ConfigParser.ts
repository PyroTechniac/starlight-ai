import { readFile } from '@pyrotechniac/star-utils';
import { rootFolder, toss } from '../utils';

export class ConfigParser {
	public readonly raw: Buffer;
	private values = new Map<ConfigParser.ConfigKeys, string>();
	public constructor(raw: Buffer) {
		this.raw = Buffer.from(raw);
		this.validate();
		this.parse();
	}

	public get(key: ConfigParser.ConfigKeys): string {
		return this.values.get(key) ?? toss(new Error(`Invalid key: '${key}'`));
	}

	private validate() {
		if (!this.raw.slice(0, ConfigParser.header.length).equals(ConfigParser.header)) throw new Error('Invalid Header');
	}

	private parse() {
		const dataWithoutHeader = this.raw.slice(ConfigParser.header.length).toString();
		console.log(dataWithoutHeader.toString());
		// Split by newline, and filter out empty spaces
		const parsed = dataWithoutHeader.split('\n').filter((value): boolean => value !== '');
		for (const line of parsed) {
			const [equalsIndex, firstQuoteIndex, lastQuoteIndex] = this.parseLine(line);
			const key = line.slice(1, equalsIndex);
			const value = line.slice(firstQuoteIndex + 1, lastQuoteIndex);
			this.values.set(ConfigParser.snakeToCamel(key) as ConfigParser.ConfigKeys, value);
		}
	}

	private parseLine(input: string) {
		if (!input.startsWith('+')) throw new Error('Line begins with invalid character');
		if (!input.endsWith(';')) throw new Error('Line ends with invalid character');
		const firstQuoteIndex = input.indexOf("'");
		const lastQuoteIndex = input.lastIndexOf("'");
		if (firstQuoteIndex === -1 || lastQuoteIndex === -1) throw new Error('Expected two single quotes around input');
		if (firstQuoteIndex === lastQuoteIndex) throw new Error('Expected two single quotes around input');
		const equalsIndex = input.indexOf('=');
		if (equalsIndex === -1) throw new Error('Expected equals sign between key and input');
		return [equalsIndex, firstQuoteIndex, lastQuoteIndex];
	}

	private static baseFile = rootFolder('assets', 'base-config.star');

	private static header = Buffer.from('# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY\n# starlight config file v1\n');

	static #base: Buffer | null = null;

	public static get base(): Buffer {
		return this.#base ?? toss(new Error('ConfigParser not initialized'));
	}

	private static set base(value: Buffer) {
		this.#base = value;
	}

	private static snakeToCamel(input: string): string {
		return input.replace(/([-_][a-z])/g,
			(group): string => group.toUpperCase()
				.replace('-', '')
				.replace('_', ''))
	}

	public static async init() {
		this.base = await readFile(this.baseFile);
	}
}

export namespace ConfigParser {
	export type ConfigKeys = 'language' | 'prefix' | 'id';
}
